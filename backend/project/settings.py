"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

# from corsheaders.defaults import default_headers
from decouple import Csv
from decouple import config as env
from django.urls import reverse_lazy

ADMIN_SITE_HEADER = "Dashboard Platform Admin"

# Build paths inside the pÂ¬roject like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

DEBUG = env("DEBUG", cast=bool)

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.admindocs",
    # DB
    "django.contrib.postgres",
    # Healthcheck
    "health_check",  # required
    "health_check.db",  # stock Django health checkers
    "health_check.cache",
    # 'health_check.storage',
    "health_check.contrib.migrations",
    # 3rd party
    "django_extensions",
    "rest_framework",
    "corsheaders",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "django_filters",
    "drf_yasg",
    # apps

]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

APPEND_SLASH = True

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI_APPLICATION = "project.wsgi.application"
ASGI_APPLICATION = "project.asgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": env("DB_DEFAULT_HOST", "postgres"),
        "NAME": env("DB_DEFAULT_NAME", "db"),
        "USER": env("DB_DEFAULT_USER", "postgres"),
        "PASSWORD": env("DB_DEFAULT_PWD", "postgres"),
        "PORT": env("DB_DEFAULT_PORT", default="5432"),
        "ATOMIC_REQUESTS": True,
    },
}

# ================================================== SECURITY ==========================================================
# Increase value according to doc: https://docs.djangoproject.com/en/4.1/ref/middleware/#http-strict-transport-security
# Once you confirm that all assets are served securely on your site (i.e. HSTS didn't break anything), it's a good idea
# to increase this value so that infrequent visitors will be protected (31536000 seconds, i.e. 1 year, is common).

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "SECRET_KEY", "django-insecure-vkk%@(mz9en!@p#_*m8bd5b1@gp&en+x@-zhi_*jz!+*$w)+!"
)
ALLOWED_HOSTS = ["*"]

# Always trust X-Forwarded-Proto header from load balancer
SECURE_PROXY_SSL_HEADER = ("X-FORWARDED-PROTO", "https")

# Production-only domain settings
if not DEBUG:
    if csrf_origins := env("CSRF_TRUSTED_ORIGINS", cast=Csv(), default=None):
        CSRF_TRUSTED_ORIGINS = csrf_origins
    # SESSION_COOKIE_SECURE = True
    # CSRF_COOKIE_SECURE = True

    ALLOWED_HOSTS = env("ALLOWED_HOSTS", cast=Csv(), default="*")

    # Security settings
    # SECURE_SSL_REDIRECT = env('SECURE_SSL_REDIRECT', cast=bool, default=True)
    # SECURE_HSTS_SECONDS = 31536000  # 1 year
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_HSTS_PRELOAD = True

    # CORS settings (if needed)
    # CORS_ALLOWED_ORIGINS = env('CORS_ALLOWED_ORIGINS', cast=Csv(), default='*')
    # CORS_ALLOW_CREDENTIALS = True


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = env("LANGUAGE_CODE", "en-us")
TIME_ZONE = env("TIME_ZONE", "UTC")
USE_I18N = env("USE_I18N", cast=bool, default=False)
USE_L10N = env("USE_L10N", cast=bool, default=False)
USE_TZ = env("USE_TZ", cast=bool, default=False)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

CORS_ORIGIN_ALLOW_ALL = env("CORS_ORIGIN_ALLOW_ALL", cast=bool, default=True)
if CORS_ORIGIN_ALLOW_ALL is False:
    CORS_ORIGIN_WHITELIST = env("CORS_ORIGIN_WHITELIST", cast=Csv())

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# GRAPH_MODELS
GRAPH_MODELS = {
    "all_applications": True,
    "group_models": True,
}

# ====================================== FIXTURES ======================================
# FIXTURE_DIRS = [
#     os.path.join(BASE_DIR, "tools", "fixtures"),
# ]

# ====================================== CACHE =========================================
REDIS_CACHE_URL = env("REDIS_CACHE_URL", default="redis://localhost:6379/0")

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_CACHE_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
        "KEY_PREFIX": "django_orm",
    }
}

# ========================== REST FRAMEWORK ===================================
# LOGIN_URL = reverse_lazy("admin:login")
# LOGOUT_URL = reverse_lazy("admin:logout")
# LOGIN_REDIRECT_URL = reverse_lazy("schema-swagger-ui")

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        # 'rest_framework.permissions.IsAuthenticated'
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly",
    ],
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
}

SWAGGER_SETTINGS = {
    # "DEFAULT_AUTO_SCHEMA_CLASS": "project.swagger.CustomSwaggerAutoSchema",
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"},
        "Token": {"type": "apiKey", "name": "Authorization", "in": "header"},
    },
    "USE_SESSION_AUTH": True,
    "VALIDATOR_URL": None,  # Disable online validator
    "PROTOCOLS": ['https', 'http'],  # Prefer HTTPS over HTTP
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

# Sentry
# SENTRY_ENABLED = env("SENTRY_ENABLED", cast=bool, default=False)
# if SENTRY_ENABLED:
#     SENTRY_DSN = env("SENTRY_DSN")
